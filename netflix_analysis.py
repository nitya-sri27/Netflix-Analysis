# -*- coding: utf-8 -*-
"""Netflix_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14eGcIVf4xXEm-58O6EaGXjYpGWHzTtp5

# üìä Netflix Data Analysis ‚Äì Portfolio Project

**Author:** Nekkanti Nitya Sri

**Dataset:** Netflix Dataset (Kaggle)  

## Introduction
This project analyzes Netflix‚Äôs dataset to uncover trends, content distribution, and insights such as:  
- How content evolved over years  
- Which countries contribute the most  
- Genre and rating distribution  
- Duration insights for movies and TV shows  
- Kids-safe content share  

Goal: To demonstrate skills in data cleaning, visualization, and business insights using Python.
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import ipywidgets as widgets

df = pd.read_csv('Netflix Dataset.csv')
df

df.head()

df.tail()

df.shape

df.size

df.info()

df.describe()

df.columns

df.dtypes

"""## üßπ Data Cleaning
- Removed duplicate records.  
- Checked for missing values (nulls) and visualized them with a heatmap.  
- Converted `Release_Date` into proper datetime format.  

"""

df[df.duplicated()]

df.drop_duplicates(inplace=True)
df[df.duplicated()]

df.shape

"""###Checking For NULL Values"""

df.head()

df.isnull()

df.isnull().sum()

"""‚û°Ô∏è Some columns like Director and Cast have missing values.  
‚û°Ô∏è This is common in real-world datasets and needs to be handled before analysis.  

"""

sns.heatmap(df.isnull())

df[df['Title'].str.contains('House of Cards')]

df[df['Country'].str.contains('India', case=False, na=False)]

df[df['Country'].isin(['India'])]

df[df['Title'].isin(['Stranger Things'])]

"""###"""

df['Date_N'] = pd.to_datetime(df['Release_Date'], format='mixed')
df.dtypes

df['Year'] = df['Date_N'].dt.year.astype('Int64')

df['Year'].value_counts().sort_index().plot(kind='bar', figsize=(12,6))
plt.title("Number of Movies & TV Shows Added to Netflix Each Year")
plt.xlabel("Year")
plt.ylabel("Count")
plt.show()

df.groupby('Category').Category.count()

sns.countplot(df['Category'])

df[(df['Category'] == 'Movie') & (df['Year'] == 2019)]

"""###Showing the only shows released in one country"""

df[(df['Category']=='TV Show') & (df['Country']=='United States')]['Title']

"""###Finding no. of movies a celebrity did"""

df.head(2)

#df[df['Cast']=='Divya Dutta']
df[df['Cast'].str.contains('Tom Cruise', case = False, na = False)]

"""## üìä Exploratory Data Analysis (EDA)
We now explore Netflix‚Äôs dataset through different visualizations to uncover patterns.  

"""

# Filter for Indian TV Shows (handles cases like "India, United States")
india_tv = df[(df['Category'] == 'TV Show') & (df['Country'].str.contains('India', na=False))]

if india_tv.empty:
    print("‚ùå No TV Shows found for India in this dataset.")
else:
    print("üìå TV Shows released in India:")
    print(india_tv['Title'].tolist())

    # --- Visual Representation ---

    '''plt.figure(figsize=(10,6))
    india_tv['Title'].value_counts().plot(kind='barh', color='skyblue')
    plt.title("TV Shows Released in India", fontsize=14)
    #plt.ylabel("TV Show Title")
    plt.show()'''

plt.figure(figsize=(12,12))  # Bigger canvas
india_tv['Title'].value_counts().plot(kind='barh', color='lightcoral')
plt.title("TV Shows Released in India", fontsize=16)
plt.xlabel("Count")
plt.ylabel("TV Show Title")
plt.xticks(rotation=45)  # Rotate labels
plt.show()

print(df['Country'].dropna().unique()[:50])
india_tv = df[
    (df['Type'] == 'TV Show') &
    (df['Country'].str.contains('India', case=False, na=False))
]
if india_tv.empty:
    print("‚ùå No TV Shows found for India in this dataset.")
else:
    print("üìå TV Shows released in India:")
    print(india_tv['Title'].tolist())

    # --- Visual Representation ---
    plt.figure(figsize=(10,6))
    india_tv['Title'].value_counts().plot(kind='barh')
    plt.title("TV Shows Released in India", fontsize=14)
    plt.xlabel("Count")
    plt.ylabel("TV Show Title")
    plt.show()

# 1. Clean Country column (avoid NaN issues)
df['Country'] = df['Country'].fillna('').astype(str)

# 2. Filter Indian TV Shows
india_tv = df[(df['Category'] == 'TV Show') &
              (df['Country'].str.contains('India', case=False, na=False))]

# 3. Check what Duration looks like
print("Unique Duration values for Indian TV Shows:")
print(india_tv['Duration'].unique())

# 4. If Duration column is not empty ‚Üí plot Pie Chart
if india_tv['Duration'].notna().any():
    plt.figure(figsize=(7,9))
    india_tv['Duration'].value_counts().plot(
        kind='pie',
        autopct='%1.1f%%',
        startangle=90,
        colors=['#66b3ff','#99ff99','#ffcc99','#ff9999','#c2c2f0','#ffb3e6']
    )
    plt.title("Duration of Indian TV Shows")
    plt.ylabel("")  # remove default ylabel
    plt.show()
else:
    print("‚ùå No duration data available for Indian TV Shows in this dataset.")

from IPython.display import display

# Clean column names
df.columns = df.columns.str.strip()

# Extract Release Year correctly
df['Release Year'] = pd.to_datetime(df['Release_Date'], errors='coerce').dt.year

# Mapping for dropdown
column_map = {
    'Duration': 'Duration',
    'Release Year': 'Release Year',
    'Genre': 'Type',
    'Country': 'Country',
    'Rating': 'Rating',
    'Category': 'Category'
}

# Dropdown widget
dropdown = widgets.Dropdown(
    options=list(column_map.keys()),
    value='Duration',
    description='Select:',
    disabled=False,
)

# Function to update plot
def update_plot(selected_label):
    col = column_map[selected_label]
    plt.figure(figsize=(9,11))

    if selected_label == 'Release Year':
        # Timeline bar plot
        df[col].value_counts().sort_index().plot(kind='bar', color='skyblue')
        plt.ylabel("Count")
        plt.xlabel("Year")
    else:
        # Pie chart for categorical data
        df[col].value_counts().head(10).plot(kind='pie', autopct='%1.1f%%', startangle=90, cmap='tab20')
        plt.ylabel("")  # Hide y-label

    plt.title(f"{selected_label} Distribution", fontsize=14)
    plt.show()

# Interactive dropdown
widgets.interact(update_plot, selected_label=dropdown)

df.sort_values(by='Release Year',ascending=False).head(10)

import matplotlib.pyplot as plt

# Get top 10 latest releases
top10 = df.sort_values(by='Release Year', ascending=False).head(10)

plt.figure(figsize=(10,6))
bars = plt.barh(top10['Title'], top10['Release Year'], color="skyblue", edgecolor="black")

# Invert y-axis so latest release is at the top
plt.gca().invert_yaxis()

# Labels and title
plt.xlabel("Release Year", fontsize=12)
plt.ylabel("Title", fontsize=12)
plt.title("Top 10 Latest Releases", fontsize=14, fontweight="bold")

# Add data labels (years) at the end of bars
for bar in bars:
    plt.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2,
             int(bar.get_width()), va='center', fontsize=10)

plt.tight_layout()
plt.show()

print("Earliest Release Year:", df['Release Year'].min())
print("Latest Release Year:", df['Release Year'].max())
print("Total Records:", len(df))

# Rating Distribution Pie Chart
plt.figure(figsize=(10,8))
df['Rating'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90, cmap='tab20')
plt.title("Rating Distribution on Netflix", fontsize=14)
plt.ylabel("")
plt.show()

"""‚û°Ô∏è Movies make up the majority of Netflix‚Äôs catalog.  
‚û°Ô∏è However, TV Shows have been increasing in recent years, showing a shift in Netflix‚Äôs strategy.  

"""

plt.figure(figsize=(12,6))
df.groupby(['Release Year','Category']).size().unstack().plot(kind='line', marker='o', figsize=(12,6))
plt.title("Movies vs TV Shows Added Over Time", fontsize=14, fontweight="bold")
plt.xlabel("Year")
plt.ylabel("Count")
plt.legend(title="Category")
plt.grid(alpha=0.3)
plt.show()

"""‚û°Ô∏è The United States dominates Netflix content production.  
‚û°Ô∏è India and the UK are the next biggest contributors, showing Netflix‚Äôs focus on international markets.  

"""

plt.figure(figsize=(10,6))
df['Country'].value_counts().head(10).plot(kind='barh', color='teal', edgecolor='black')
plt.title("Top 10 Countries with Most Netflix Content", fontsize=14, fontweight="bold")
plt.xlabel("Count")
plt.ylabel("Country")
plt.gca().invert_yaxis()
plt.show()

"""‚û°Ô∏è Most Netflix movies are between 90‚Äì120 minutes long.  
‚û°Ô∏è This aligns with the global standard for feature-length films.  

"""

movies = df[df['Category']=='Movie']
tvshows = df[df['Category']=='TV Show']
if 'Duration' in movies.columns:
    movie_durations = movies['Duration'].str.extract( '(\d+)').dropna().astype(int)
    plt.figure(figsize=(10,6))
    sns.histplot(movie_durations[0], bins=30, color='orange', kde=True)
    plt.title("Distribution of Movie Durations (minutes)", fontsize=14, fontweight="bold")
    plt.xlabel("Duration (minutes)")
    plt.ylabel("Count")
    plt.show()

"""‚û°Ô∏è Most Netflix TV Shows have only 1‚Äì2 seasons.  
‚û°Ô∏è This suggests Netflix often invests in short series and cancels underperforming ones quickly.  

"""

# TV Show seasons
if 'Duration' in tvshows.columns:
    plt.figure(figsize=(10,6))
    tvshows['Duration'].value_counts().head(10).plot(kind='bar', color='purple', edgecolor='black')
    plt.title("Top Season Counts for TV Shows", fontsize=14, fontweight="bold")
    plt.xlabel("Seasons")
    plt.ylabel("Number of Shows")
    plt.show()

"""‚û°Ô∏è A few directors contribute multiple titles on Netflix.  
‚û°Ô∏è This shows Netflix relies on established creators to produce popular content.  

"""

# Top 10 Directors
plt.figure(figsize=(10,6))
df['Director'].dropna().value_counts().head(10).plot(kind='barh', color='coral', edgecolor='black')
plt.title("Top 10 Directors on Netflix", fontsize=14, fontweight="bold")
plt.xlabel("Count")
plt.ylabel("Director")
plt.gca().invert_yaxis()
plt.show()

"""‚û°Ô∏è Popular actors frequently appear in Netflix titles.  
‚û°Ô∏è This reflects Netflix‚Äôs strategy of using star power to attract audiences.  

"""

# Top 10 Actors
plt.figure(figsize=(10,6))
df['Cast'].dropna().str.split(',').explode().str.strip().value_counts().head(10).plot(kind='barh', color='green', edgecolor='black')
plt.title("Top 10 Actors on Netflix", fontsize=14, fontweight="bold")
plt.xlabel("Count")
plt.ylabel("Actor")
plt.gca().invert_yaxis()
plt.show()

"""‚û°Ô∏è Only about ~X% of Netflix‚Äôs catalog is kids-friendly.  
‚û°Ô∏è This highlights that Netflix‚Äôs main focus is on adult and family audiences rather than children.  

"""

kids_safe = ['G','PG','TV-Y','TV-Y7','TV-G']
kids_content = df[df['Rating'].isin(kids_safe)]

share = round(len(kids_content)/len(df)*100,2)
print(f"Kids content makes up {share}% of Netflix‚Äôs catalog")

plt.figure(figsize=(6,6))
sizes = [len(kids_content), len(df)-len(kids_content)]
labels = ["Kids Content","Other Content"]
colors = ["#66b3ff","#ff9999"]
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors)
plt.title("Kids vs Other Content on Netflix", fontsize=14, fontweight="bold")
plt.show()

"""‚û°Ô∏è Drama and Comedy are the most common genres on Netflix.  
‚û°Ô∏è These genres dominate because they appeal to a wide global audience.  

"""

plt.figure(figsize=(10,6))
df['Type'].str.split(',').explode().str.strip().value_counts().head(10).plot(
    kind='bar',
    color='skyblue',
    edgecolor='black'
)
plt.title("Top 10 Genres on Netflix", fontsize=14, fontweight="bold")
plt.xlabel("Genre")
plt.ylabel("Count")
plt.xticks(rotation=45)
plt.show()

"""## üìù Insights & Conclusion
- Netflix‚Äôs content surged after 2015, showing aggressive global expansion.  
- **TV Shows** have been growing faster than Movies in recent years.  
- The **USA** dominates Netflix‚Äôs catalog, followed by **India** and the **UK**.  
- **Drama and Comedy** are the top genres, making up a large share of the content.  
- Average **movie duration** is 90‚Äì120 minutes; most TV Shows have 1‚Äì2 seasons.  
- Only about **X%** of content is kids-safe, showing Netflix is more focused on general/adult audiences.  

üëâ Overall, Netflix is shifting strategy towards **TV shows and global content**, while maintaining its strong base in Movies.

"""